{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.1.0.0
synopsis:            Short description
description:         Please see the README on GitHub at <https://github.com/lehins/{{name}}#readme>
homepage:            https://github.com/lehins/{{name}}
license:             BSD3
license-file:        LICENSE
author:              Alexey Kuleshevich
maintainer:          alexey@kuleshevi.ch
copyright:           {{year}}{{^year}}2023{{/year}} Alexey Kuleshevich
category:            Algorithms
build-type:          Simple
extra-source-files:  README.md
                   , CHANGELOG.md
cabal-version:       1.18
tested-with:         GHC == 7.10.3
                   , GHC == 8.0.2
                   , GHC == 8.2.2
                   , GHC == 8.4.4
                   , GHC == 8.6.5
                   , GHC == 8.8.4
                   , GHC == 8.10.7
                   , GHC == 9.0.2
                   , GHC == 9.2.5
                   , GHC == 9.4.4

library
  hs-source-dirs:      src
  exposed-modules:     Lib

  other-modules:
  build-depends:       base >= 4.8 && < 5

  default-language:    Haskell2010
  ghc-options:         -Wall


executable {{name}}
  main-is: Main.hs
  other-modules:
      Paths_{{name-as-varid}}
  hs-source-dirs:     app
  ghc-options:        -Wall
                      -O2
                      -threaded
                      -rtsopts
                      -with-rtsopts=-N
  build-depends:      base
                    , {{name}}
  default-language: Haskell2010

test-suite doctests
  type:             exitcode-stdio-1.0
  hs-source-dirs:   tests
  main-is:          doctests.hs
  build-depends: base
               , doctest >=0.15
               , {{name}}
  default-language:    Haskell2010
  ghc-options:        -Wall
                      -fno-warn-orphans
                      -threaded

test-suite tests
  type:               exitcode-stdio-1.0
  hs-source-dirs:     tests
  main-is:            Main.hs
  other-modules:      Common
                    , LibSpec
                    , Spec
  build-tool-depends: hspec-discover:hspec-discover
  build-depends:      base
                    , {{name}}
                    , hspec
                    , QuickCheck

  default-language:   Haskell2010
  ghc-options:        -Wall
                      -fno-warn-orphans
                      -threaded
                      -with-rtsopts=-N2

benchmark bench
  type:                exitcode-stdio-1.0
  hs-source-dirs:      bench
  main-is:             Bench.hs
  ghc-options:         -Wall
                       -threaded
                       -O2
                       -with-rtsopts=-N
  build-depends:       base
                     , criterion
                     , {{name}}
  default-language:    Haskell2010

source-repository head
  type:     git
  location: https://github.com/lehins/{{name}}

{-# START_FILE Setup.hs #-}
import Distribution.Simple

main :: IO ()
main = defaultMain

{-# START_FILE src/Lib.hs #-}
-- |
-- Module      : Lib
-- Copyright   : (c) Alexey Kuleshevich 2023
-- License     : BSD3
-- Maintainer  : Alexey Kuleshevich <alexey@kuleshevi.ch>
-- Stability   : experimental
-- Portability : non-portable
--
module Lib
  ( someFunc
  ) where

someFunc :: IO ()
someFunc = putStrLn "someFunc"

{-# START_FILE tests/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover -optF --module-name=Spec #-}

{-# START_FILE tests/Main.hs #-}
{-# LANGUAGE CPP #-}

module Main where

import Spec (spec)
import System.IO (BufferMode (LineBuffering), hSetBuffering, hSetEncoding, stdout, utf8)
import Test.Hspec.Runner

config :: Config
#if !(MIN_VERSION_hspec(2,8,0))
config = defaultConfig
#else
config =
  defaultConfig
    { configTimes = True
    , configColorMode = ColorAlways
    }
#endif

main :: IO ()
main = do
  hSetBuffering stdout LineBuffering
  hSetEncoding stdout utf8
  hspecWith config spec

{-# START_FILE tests/Common.hs #-}
module Common
  ( module X
  ) where

import Test.Hspec as X
import Test.Hspec.QuickCheck as X
import Test.QuickCheck as X

{-# START_FILE tests/LibSpec.hs #-}
module LibSpec (spec) where

import Common

spec :: Spec
spec = do
  describe "someFunc" $ do
    xit "DoesSomething" $ property $ \ a@() -> () === a

{-# START_FILE tests/doctests.hs #-}
{-# LANGUAGE CPP #-}

module Main where

#if __GLASGOW_HASKELL__ >= 802 && __GLASGOW_HASKELL__ < 810

import Test.DocTest (doctest)

main :: IO ()
main = doctest ["src"]

#else

-- TODO: fix doctest support
main :: IO ()
main =
  putStrLn "\nDoctests are not supported for ghc version 8.2 and prior as well as 8.10 and newer\n"

#endif
{-# START_FILE app/Main.hs #-}
module Main where

import Lib

main :: IO ()
main = someFunc

{-# START_FILE bench/Bench.hs #-}
module Main where

import Criterion.Main
import Lib

main :: IO ()
main = do
  defaultMain
    [ bgroup "Bench"
      [ bench "someFunc" $ nfIO someFunc
      ]
    ]

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE CHANGELOG.md #-}
# Changelog for `{{name}}`

## 0.1.0.0

* Initial release

{-# START_FILE LICENSE #-}
Copyright Alexey Kuleshevich (c) {{year}}{{^year}}2023{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Alexey Kuleshevich nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE .gitignore #-}
.stack-work*
*~
